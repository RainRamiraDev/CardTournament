{
  "QueryGetAll": "SELECT * FROM T_TOURNAMENTS;",



  "QueryGetTournamentById": "SELECT id_country, id_organizer, start_datetime, end_datetime, current_phase FROM t_tournaments WHERE id_tournament = @id_tournament",



  "QueryCreateTournament": "INSERT INTO T_TOURNAMENTS (id_country, id_organizer, start_datetime, end_datetime, current_phase) VALUES (@IdCountry, @IdOrganizer, @StartDatetime, @End_Datetime, @CurrentPhase); SELECT LAST_INSERT_ID();",




  "QueryGetAvailableTournaments": "SELECT id_tournament FROM t_tournaments WHERE id_country IS NOT NULL AND id_organizer IS NOT NULL AND start_datetime IS NOT NULL AND end_datetime IS NOT NULL AND current_phase = 1;",





  "QueryInsertJudges": "INSERT INTO T_TOURN_JUDGES (id_tournament, id_judge) VALUES (@id_tournament, @id_judge);",
  "QueryGetJudgeByAlias": "SELECT id_user FROM T_USERS WHERE alias IN @Aliases AND Id_rol = 3;",


  "QueryGetTournamentsInformation": "SELECT tt.id_tournament AS 'Id_Torneo', tc.country_name AS 'Pais', tt.start_datetime AS 'FechaDeInicio', tt.end_datetime AS 'FechaDeFinalizacion', GROUP_CONCAT(DISTINCT ju.fullname ORDER BY ju.fullname SEPARATOR ', ') AS 'Jueces', GROUP_CONCAT(DISTINCT ts.series_name ORDER BY ts.series_name SEPARATOR ', ') AS 'Series', GROUP_CONCAT(DISTINCT tu.alias ORDER BY tu.alias SEPARATOR ', ') AS 'Jugadores', (SELECT tu.alias FROM t_matches tm2 JOIN t_users tu ON tu.id_user = tm2.winner WHERE tm2.id_round = (SELECT MAX(id_round) FROM t_rounds WHERE id_tournament = tt.id_tournament) LIMIT 1) AS 'Ganador' FROM t_tournaments tt JOIN t_countries tc ON tt.id_country = tc.id_country LEFT JOIN t_tourn_judges tj ON tt.id_tournament = tj.id_tournament LEFT JOIN t_users ju ON tj.id_judge = ju.id_user LEFT JOIN t_tourn_series tts ON tts.id_tournament = tt.id_tournament LEFT JOIN t_series ts ON ts.id_series = tts.id_series LEFT JOIN t_tourn_players ttp ON ttp.id_tournament = tt.id_tournament LEFT JOIN t_users tu ON tu.id_user = ttp.id_player WHERE tt.current_phase = @current_phase GROUP BY tt.id_tournament, tc.country_name ORDER BY tt.start_datetime DESC;",

  "QueryGetTournamentJudgesIds": "SELECT id_judge FROM t_tourn_judges WHERE id_tournament = @id_tournament;",

  "QueryInsertSeries": "INSERT INTO T_TOURN_SERIES (id_tournament, id_series) VALUES (@id_tournament, @id_series);",


  "QueryInsertDecks": "INSERT INTO T_TOURN_DECKS (id_tournament, id_card_series, id_owner) VALUES (@id_tournament, @id_card_series, @id_owner);",
  "QueryInsertPlayers": "INSERT INTO T_TOURN_PLAYERS (id_tournament, id_player) VALUES (@Id_tournament,@id_player);",
  "QuerySetTournamentNextPhase": "UPDATE T_TOURNAMENTS SET current_phase = current_phase + 1 WHERE id_tournament = @id_tournament AND current_phase < 3;",
  "QueryGetCurrentPhase": "SELECT current_phase FROM T_TOURNAMENTS WHERE id_tournament = @id_tournament;",
  "QueryTournamentExist": "SELECT COUNT(1) FROM T_TOURNAMENTS WHERE id_tournament = @id_tournament;",
  "QueryGetSeriesFromTournament": "SELECT ts.id_series FROM t_tournaments tt JOIN t_tourn_series ts ON tt.id_tournament = ts.id_tournament WHERE tt.id_tournament = @id_tournament",
  "QueryGetTournamentStartDatetime": "SELECT  tt.start_datetime FROM t_tournaments tt WHERE tt.id_tournament = @id_tournament",
  "QuerySetTournamentEndDateTime": "UPDATE t_tournaments SET End_DateTime = @End_DateTime WHERE id_tournament = @id_tournament;",
  "QueryGetCardsFromTournamentSeries": "SELECT id_card FROM t_card_series WHERE id_series IN @Id_series;",
  "QueryGetCardsByIllustration": "SELECT illustration FROM t_cards WHERE id_card IN @id_card;",

  "QueryGetUsersFromDb": "SELECT id_user FROM t_users WHERE id_rol = @id_rol AND ki IS NOT NULL;",

  "QueryGetCardIllustrationById": "SELECT illustration FROM t_cards WHERE id_card IN @id_card;",

  "QueryGetAllSeriesNames": "SELECT series_name,id_series FROM t_series WHERE series_name IS NOT NULL AND release_date IS NOT NULL ORDER BY series_name asc",

  "QueryGetCountriesFromDb": "SELECT id_country FROM t_countries",

  "QueryGetAllCountries": "SELECT country_name, id_country FROM t_countries WHERE country_name IS NOT NULL ORDER BY country_name asc;",

  "QueryGetAllSeries": "SELECT id_series FROM t_series",

  "QueryGetTournamentPlayers": "SELECT id_player FROM t_tourn_players WHERE id_tournament = @id_tournament",

  "QueryGetIdCardSeries": "SELECT DISTINCT tcs.id_card_series FROM t_card_series tcs WHERE tcs.id_card IN @IdCard;",
  "QueryGetCards": "SELECT s.series_name, c.illustration, c.attack, c.deffense, s.release_date FROM T_CARDS c JOIN T_CARD_SERIES cs ON c.id_card = cs.id_card JOIN T_SERIES s ON cs.id_series = s.id_series WHERE s.id_series IN @idSeries ORDER BY 1 ASC;",
  "QueryGetCardsByIllustration": "SELECT id_card FROM t_cards WHERE illustration IN @Illustration;",
  "QueryGetSeriesByName": "SELECT ts.id_series FROM t_series ts WHERE ts.series_name IN @SeriesNames;",
  "QueryGetCardsBySeriesName": "SELECT s.series_name, c.illustration, c.attack, c.deffense, s.release_date FROM T_CARDS c JOIN T_CARD_SERIES cs ON c.id_card = cs.id_card JOIN T_SERIES s ON cs.id_series = s.id_series WHERE s.series_name IN @SeriesName ORDER BY 1 ASC;",

  "QueryCreateGame": "INSERT INTO T_GAMES (id_tournament, start_datetime) VALUES (@id_tournament, @start_datetime); SELECT LAST_INSERT_ID();",
  "QueryInsertGamePlayers": "INSERT INTO T_GAME_PLAYERS (id_game, id_player) VALUES (@id_game, @id_player);",
  "QuerySetWinner": "UPDATE T_USERS SET games_won = games_won + 1 WHERE id_user = @id_player;",
  "QuerySetLosers": "UPDATE T_USERS SET games_lost = games_lost + 1 WHERE id_user IN @losers;",
  "QueryGetPlayersIds": "SELECT id_player FROM T_TOURN_PLAYERS WHERE id_tournament = @id_tournament;",

  // controlar
  "QueryCreateRound": "INSERT INTO T_ROUNDS (id_tournament, round_number, judge) VALUES (@id_tournament, @round_number, @judge);",



  "QueryCreateMatch": "INSERT INTO T_MATCHES (id_round, id_player1, id_player2, winner) VALUES (@id_round, @id_player1, @id_player2, @winner); SELECT LAST_INSERT_ID();",
  "QuerySetNextRound": "INSERT INTO T_ROUNDS (id_tournament, round_number, is_completed) VALUES (@id_tournament, @round_number, FALSE);",
  "QueryGetLastRound": "SELECT COALESCE(MAX(round_number), 0) FROM T_ROUNDS WHERE id_tournament = @id_tournament;",
  "QueryCompleteRound": "UPDATE T_ROUNDS SET is_completed = TRUE WHERE id_tournament = @id_tournament AND round_number = @round_number;",
  "QueryGetLastInsertId": "SELECT LAST_INSERT_ID();",

  "QueryVerifyToken": "SELECT 1 FROM T_REFRESH_TOKENS WHERE token = @Token AND expiry_date > @Now LIMIT 1;",
  "QueryDeleteToken": "DELETE FROM T_REFRESH_TOKENS WHERE token = @Token;",
  "QuerySaveToken": "INSERT INTO T_REFRESH_TOKENS (token, id_user, expiry_date) VALUES (@Token, @id_user, @ExpiryDate);",
  "QueryGetToken": "SELECT token FROM T_REFRESH_TOKENS WHERE id_user = @id_user LIMIT 1;",
  "QueryGetUser": "SELECT u.id_user, u.fullname, u.email FROM T_USERS u INNER JOIN T_REFRESH_TOKENS rt ON rt.id_user = u.id_user WHERE rt.token = @Token AND rt.expiry_date > @Now;",

  "QueryGetUserWhitToken": "SELECT * FROM T_Users WHERE Id_User = @Id_user;",
  "QueryFirstLogIn": "INSERT INTO T_Users (Fullname, Passcode, Id_Rol) VALUES (@Fullname, @Passcode, @Id_Rol);",
  "QueryLogin": "SELECT Id_User, Fullname, Passcode, Id_Rol FROM T_Users WHERE Fullname = @Fullname;",
  "QueryGetAllJudges": "SELECT u.Fullname, u.Alias, u.Email, c.country_name as Country, u.avatar_url FROM t_users u JOIN t_countries c ON u.id_country = c.id_country WHERE Id_rol = 3 AND u.Fullname IS NOT NULL AND u.Alias IS NOT NULL AND u.Email IS NOT NULL AND c.country_name IS NOT NULL AND u.avatar_url IS NOT NULL ORDER BY u.alias asc;",
  "QueryGetPlayersRankIds": "SELECT ki FROM t_users WHERE Id_user = @Id;",

  "QueryCreateUser": "INSERT INTO t_Users (Id_Country, Id_Rol, Fullname, Passcode, Alias, Email, Avatar_Url, Games_Won, Games_Lost, Disqualifications,ki) VALUES (@Id_Country, @Id_Rol, @Fullname, @Passcode,@Alias, @Email, @Avatar_Url, @Games_Won, @Games_Lost, @Disqualifications, @Ki);",

  "QueryGetAllEmails": "SELECT email FROM t_users WHERE email IS NOT null;",
  "QueryGetAllAlias": "SELECT alias FROM t_users WHERE alias IS NOT null;"

}
